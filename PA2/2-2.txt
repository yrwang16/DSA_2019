1. 在函数体外定义二维数组a存放数据。
2. 通过循环体读入矩阵元素。
3. 对矩阵做预处理：将矩阵元素更改为其上方连续的1的数量，自顶而下做加法，仅需依次遍历，复杂度O(n^2)。
4. 对矩阵的每行元素维护一个单调栈，定义num为栈内元素对其右侧元素未进栈的元素的贡献和。
5. 贡献和计算方法： 栈内元素的高（超过mmax则取mmax）乘其至栈内上一个元素的距离，即为这个区间对右侧贡献
对所有区间求和即可。
6. 需要注意的是，区别于普通的栈结构，此栈的底部是可以pop的，原因在于nnmx的限制，故栈所包含的区间长度不应超过nmax
所以在超过nmax的时候，需要动态维护num：num减栈底元素（约束区间的最后一个位置的元素）即可。此外，若该元素在栈内，则将栈内该元素出栈。
7. 遍历过程中，每个元素均为O(1)的时间，总复杂度为O(n^2).