1. 使用散列进行初筛，哈希函数选择先将字符串元素(int)求和,再使用多项式法进行处理
	这是为了保证顺序不同的同一轮子上的序列分到同一个位置，便于进一步比较
2. 使用顺序试探法解决冲突，因为散列表开的比较大（1000007），冲突概率极低，无需设计复杂的冲突解决方法
3. 分配到位置后，先判断该位置是否有元素，
	若没有，将当前元素放置在该位置
		具体操作为复制该字符串两遍（为了方便使用kmp判断是否在同一个轮子，因为首尾相接的两遍复制已经涵盖了所有可能
		并记录当前字符串是第几个字符串
	若有，判断两个字符串是否属于同一个轮子，使用改进的kmp算法
		若属于，则返回该位置原有字符串的rank（因为只记录第一个，故即为第一个）
		若不属于，则属于冲突，继续试探即可
4. 使用数组存放所有rank值，待处理完毕后，统一打印
5. 空间成本主要为散列表大小即string[1000007]，时间成本每个字符串处理一遍，每次使用kmp,O(n),故为O（mn）